# -*- coding: utf-8 -*-
"""
Container

Created: 			23 Apr 2019
Last updated: 		10 Aug 2019
"""
from __future__ import print_function
import pandas
from openerp import models, fields, api
from . import px_vars
from . import exc_prod

from openerp.addons.price_list.models.lib import sys_func

class PricelistContainer(models.Model):
	"""
	Creates, updates and manages Products
	Pricelist 2019

	Uses PL Products
	"""
	_name = 'price_list.container'

	_description = 'container'



# ----------------------------------------------------------- Dep --------------------------

	#path = fields.Char(
	#		required=False,
	#	)



# ----------------------------------------------------------- Relational --------------------------

	# Configurator
	configurator = fields.Many2one(
			'openhealth.configurator.emr',
			string="Configuracion",
			required=True,
		)



	#product_ids = fields.Char(
	product_ids = fields.One2many(
			'price_list.product',
			'container_id',
		)






# ----------------------------------------------------------- 0 Level ---------------------------------------------

	#@api.multi
	def validate(self):
		"""
		Validate
		"""
		print()
		print('Validate')
		self.validate_product_templates()



# ----------------------------------------------------------- First Level - Buttons ---------------------------------------------

	@api.multi
	def validate_product_templates(self):

		"""
		Validate All Product Templates
		"""
		print()
		print('Product Validate Product Templates')


		# Search
		products = self.env['product.template'].search([
																	('pl_price_list', 'in', ['2019']),
															],
															#order='pl_prefix,pl_idx_int asc',
															#order='pl_idx_int,pl_prefix asc',
															order='pl_prefix asc',
															#limit=10,
															#limit=100,
															limit=600,
														)
		# Loop
		idx = 0
		for product in products:
			#print()
			#print(product.name)
			#sys_func.print_x(product.name)

			idx = idx + 1

			# Handle Exceptions
			exc_prod.handle_exceptions(product)

		#print(idx)





# ----------------------------------------------------------- Load CSV - Button -------------------
	@api.multi
	def load_csv(self):
		"""
		Load CSV file, created with Excel.
		From input generated by the customer.
		"""
		print('Load')


		# Clean
		#self.product_ids.unlink()
		self.clear()



		# Init
		#fname = self.path + self.file_name
		fname = self.configurator.path_csv_pricelist + self.file_name

		df = self.open_with_pandas_read_csv(fname)
		#print(df)


		# Loop
		for index, row in df.iterrows():
			#print(row['idx'], row['name'])
			#print(row['name'])
			#print(row['name_short'])

			# Check Values
			level = self.check(row['level'])
			time = self.check(row['time'])
			price = self.check(row['price'])
			price_vip = self.check(row['price_vip'])
			price_company = self.check(row['price_company'])
			price_session = self.check(row['price_session'])
			price_session_next = self.check(row['price_session_next'])
			price_max = self.check(row['price_max'])
			time_stamp = row['time_stamp']

			if row['x_type'] in ['product']:
				manufacturer = row['manufacturer']
				brand = row['brand']
				name = row['name'].upper()
				name_short = row['name_short'].upper()
			else:
				manufacturer = False
				brand = False
				name = row['name']
				name_short = row['name_short']

			# Create
			product = self.product_ids.create({
												'name': 			name,
												'name_short': 		name_short,
												'time_stamp': 		time_stamp,
												'prefix': 			row['prefix'],
												'idx': 				row['idx'],
												'code': 			False,
												'x_type': 			row['x_type'],
												'family': 			row['family'],
												'subfamily': 		row['subfamily'],
												'treatment': 		row['treatment'],
												'zone': 			row['zone'],
												'pathology': 		row['pathology'],
												'sessions': 		row['sessions'],
												'level': 			level,
												'time': 				time,
												'price': 				price,
												'price_vip': 			price_vip,
												'price_company': 		price_company,
												'price_session': 		price_session,
												'price_session_next': 	price_session_next,
												'price_max': 			price_max,

												# Only Prods
												'manufacturer': 	manufacturer,
												'brand': 			brand,

												# Handle
												'container_id': 	self.id,
											})
			#print(product)
	# load_csv



# ----------------------------------------------------------- Create Products 2019 - Button------------------------
	@api.multi
	def create_products_2019(self):
		"""
		Create Product Templates 2019
		Uses Pricelist Products
		Avoids Product Template Duplication

		"""
		print()
		print('Create Products 2019')

		# Search
		products = self.env['price_list.product'].search([
															#('x_name_short', 'in', [name]),
														],
															#order='date_begin asc',
															#limit=1,
													)
		print(products)


		# Count
		count = self.env['price_list.product'].search_count([
														],
															#order='x_serial_nr asc',
															#limit=1,
													)
		print(count)


		for pro in products:

			print(pro)
			print(pro.name)

			
			# Count
			count = self.env['product.template'].search_count([
																('name', '=', pro.name),
																('pl_price_list', '=', '2019'),
														])
			#print(count)

			# Avoids Product Template Duplication
			if count == 0:
				product_template = self.env['product.template'].create({

																			'name': 			pro.name,

																			'sale_ok': 			True,
																			'purchase_ok': 		False,



																			'pl_price_list': 	'2019',
																			'pl_time_stamp': 	pro.time_stamp,
																			'type': 			pro.x_type,
																			'pl_name_short': 	pro.name_short,
																			'pl_prefix': 		pro.prefix,
																			'pl_idx': 			pro.idx,
																			'pl_idx_int': 		pro.idx_int,
																			'pl_family': 		pro.family,
																			'pl_subfamily':		pro.subfamily,
																			'pl_treatment': 	pro.treatment,
																			'pl_zone': 			pro.zone,
																			'pl_pathology': 	pro.pathology,
																			'pl_level': 		pro.level,
																			'pl_sessions': 		pro.sessions,
																			'pl_time': 			pro.time,
																			'list_price': 				pro.price,
																			'pl_price_vip': 			pro.price_vip,
																			'pl_price_company': 		pro.price_company,
																			'pl_price_session': 		pro.price_session,
																			'pl_price_session_next': 	pro.price_session_next,
																			'pl_price_max': 			pro.price_max,

																			# Only Prods
																			'pl_manufacturer': 			pro.manufacturer,
																			'pl_brand': 				pro.brand,
																})

				#print(product_template)
		#print(products)
		#print(count)

	# create_products_2019


# ----------------------------------------------------------- Update - Button ----------------------------------------------------
	@api.multi
	def update(self):
		"""
		Updates All Products
		"""
		print('Container Update')

		# Search
		products = self.env['product.template'].search([
															('pl_price_list', '=', '2019'),
														],
															#order='date_begin asc',
															#limit=1,
													)
		for product in products:
			product.update()
	# update






# ----------------------------------------------------------- Second Level - Services ---------------------------------------------

	def open_with_pandas_read_csv(self, filename):
		"""
		Open with Pandas
		"""
		csv_delimiter = ","
		df = pandas.read_csv(filename, sep=csv_delimiter)
		#data = df.values
		#data = df
		#return data
		return df


	def check(self, value):
		"""
		Check parameters, for consistence
		Convert -1 to False
		"""
		#print('Check')
		#print(value)
		if value in ['-1', -1]:
			return False
		else:
			return value



# ----------------------------------------------------------- Third Level - Fields ---------------------------------------------

	name = fields.Char(
			required=True,
		)

	file_name = fields.Selection(
			selection=px_vars._file_name_list,
			required=True,
		)

	caps_name = fields.Boolean(
			default=False,
		)



# ----------------------------------------------------------- Clear - Button ----------------------------------------------------
	@api.multi
	def clear(self):
		"""
		Clear
		"""
		self.product_ids.unlink()

		# Pricelist Products
		products = self.env['price_list.product'].search([
															#('x_name_short', 'in', [name]),
														],
															#order='date_begin asc',
															#limit=1,
													)
		products.unlink()
