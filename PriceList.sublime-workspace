{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fi",
				"first_contact"
			],
			[
				"di",
				"diagnosis"
			],
			[
				"get",
				"get_last_consultation"
			],
			[
				"con",
				"consultation"
			],
			[
				"me",
				"mea_vip"
			],
			[
				"mea",
				"mea_f"
			],
			[
				"pa",
				"patient"
			],
			[
				"age",
				"age_years"
			],
			[
				"pl",
				"pl_update_sales"
			],
			[
				"upda",
				"update_patients"
			],
			[
				"date",
				"date_test"
			],
			[
				"per",
				"per_amo_subfamilies"
			],
			[
				"type",
				"type_arr"
			],
			[
				"sta",
				"state_arr"
			],
			[
				"produc",
				"product_id"
			],
			[
				"name",
				"Name"
			],
			[
				"Sub",
				"Subfamily"
			],
			[
				"s",
				"state"
			],
			[
				"man",
				"management_id"
			],
			[
				"do",
				"doctor_daily"
			],
			[
				"docto",
				"doctor_daily"
			],
			[
				"doc",
				"doctor"
			],
			[
				"pro",
				"productivity_day"
			],
			[
				"Fa",
				"False"
			],
			[
				"ord",
				"ord_funcs"
			],
			[
				"x",
				"x_counter_value"
			],
			[
				"x_",
				"x_procedure_created"
			],
			[
				"is",
				"is_procedure"
			],
			[
				"por",
				"product_id"
			],
			[
				"Proce",
				"Procedure"
			],
			[
				"pl_p",
				"pl_price_list"
			],
			[
				"product",
				"product_template"
			],
			[
				"Con",
				"Controls"
			],
			[
				"Reco",
				"Recommendations"
			],
			[
				"create",
				"create_controls"
			],
			[
				"fil",
				"_file_name_list"
			],
			[
				"def",
				"default"
			],
			[
				"produ",
				"product_ids"
			],
			[
				"pl_pr",
				"pl_prefix"
			],
			[
				"g",
				"group"
			],
			[
				"handle_exceptions_i",
				"handle_exceptions_id_doc"
			],
			[
				"Inv",
				"Invoice"
			],
			[
				"in",
				"invoice"
			],
			[
				"v",
				"validate"
			],
			[
				"p",
				"project"
			],
			[
				"open",
				"openhealth"
			],
			[
				"day",
				"days_inactive"
			],
			[
				"nr_p",
				"nr_products_stats"
			],
			[
				"nr_pro",
				"nr_products"
			],
			[
				"st",
				"statistics"
			],
			[
				"tst_list_",
				"tst_list_all"
			],
			[
				"ts",
				"tst_list_all"
			],
			[
				"tst",
				"tst_list"
			],
			[
				"te",
				"test_pricelist_2019"
			],
			[
				"or",
				"order"
			],
			[
				"Se",
				"Selection"
			],
			[
				"no",
				"normal"
			],
			[
				"corr",
				"corr_medical"
			],
			[
				"Car",
				"CARBOXITERAPIA"
			],
			[
				"co",
				"cosmetology"
			],
			[
				"delta_ana",
				"delta_analyse_patient_lines"
			],
			[
				"del",
				"delta_sales_pl"
			],
			[
				"delta",
				"delta_create_sale_lines"
			],
			[
				"sal",
				"sale_line"
			],
			[
				"EM",
				"EMR"
			],
			[
				"an",
				"analyse_patient_lines"
			],
			[
				"ana",
				"analyse_sale_lines"
			],
			[
				"cre",
				"create_sale_lines"
			],
			[
				"patien",
				"patient_line_id"
			],
			[
				"dat",
				"date"
			],
			[
				"vip",
				"vip_false"
			],
			[
				"mar",
				"marketing_id"
			],
			[
				"order",
				"order_line"
			],
			[
				"sale",
				"sale_line_budget_count"
			],
			[
				"sale_line",
				"sale_line_product_count"
			],
			[
				"fa",
				"family"
			],
			[
				"sale_line_pro",
				"sale_line_procedure_count"
			],
			[
				"ma",
				"marketing_id"
			],
			[
				"mo",
				"model"
			],
			[
				"pri",
				"price_list_2019_count"
			],
			[
				"prod",
				"product_id"
			],
			[
				"su",
				"subfamily"
			],
			[
				"Conta",
				"Contacto"
			],
			[
				"gr",
				"group"
			],
			[
				"vip_al",
				"vip_already_true"
			],
			[
				"grou",
				"groups"
			],
			[
				"pat",
				"pat_line"
			],
			[
				"Ve",
				"Ventas"
			],
			[
				"da",
				"date_bx"
			],
			[
				"comp",
				"company_ruc"
			],
			[
				"com",
				"company_ruc"
			],
			[
				"fie",
				"file_name"
			],
			[
				"creat",
				"create_file"
			],
			[
				"w",
				"warning"
			],
			[
				"coun",
				"count_total"
			],
			[
				"amou",
				"amount_total"
			],
			[
				"am",
				"amount_total"
			],
			[
				"patie",
				"patient_id"
			],
			[
				"pati",
				"patient"
			],
			[
				"P",
				"Patients"
			],
			[
				"b",
				"bcp_tot"
			],
			[
				"sco",
				"scotiabank_tot"
			],
			[
				"bb",
				"bbva_tot"
			],
			[
				"rsp_t",
				"rsp_total_delta"
			],
			[
				"rsp",
				"rsp_count"
			],
			[
				"rs",
				"rsp_count_delta"
			],
			[
				"rst",
				"rsp_count"
			],
			[
				"I",
				"Integer"
			],
			[
				"F",
				"False"
			],
			[
				"repo",
				"report_sale_product"
			],
			[
				"pl_va",
				"pl_validate_external"
			],
			[
				"In",
				"Internal"
			],
			[
				"Su",
				"Subfamilia"
			],
			[
				"to",
				"total_amount_year"
			],
			[
				"amo_su",
				"amo_sub_con_med"
			],
			[
				"per_amo_su",
				"per_amo_sub_con_med"
			],
			[
				"per_amo_sub_con",
				"per_amo_sub_con_cha"
			],
			[
				"per_amo_sub_co",
				"per_amo_sub_con_gyn"
			],
			[
				"per_amo_pro",
				"per_amo_products"
			],
			[
				"per_amo_e",
				"per_amo_echo"
			],
			[
				"x_id",
				"x_id_doc_type_code"
			],
			[
				"expo",
				"export_date_begin"
			],
			[
				"ex",
				"export_date_end"
			],
			[
				"Int",
				"Integer"
			],
			[
				"ag",
				"age_years"
			],
			[
				"price",
				"pricelist_id"
			],
			[
				"pric",
				"price_list"
			],
			[
				"create_recommendations_",
				"create_recommendations_2019"
			]
		]
	},
	"buffers":
	[
		{
			"file": "__openerp__.py",
			"settings":
			{
				"buffer_size": 4961,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "readme.txt",
			"settings":
			{
				"buffer_size": 62,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/marketing.py",
			"settings":
			{
				"buffer_size": 18332,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\n\tStax Library\n\n\tUsed by\n\t\tMarketing\n\n\tUses\n\t\tmkt_funcs\n\n\n\t- Update Stats\n\t- Update Vip Sales\n\t- Create Sale Lines\n\t- Analyse patient Lines\n\t- Analyse Sale Lines\n\n \tCreated: \t\t\t\t10 Dec 2019\n \tLast up: \t \t\t\t10 Dec 2019\n\"\"\"\n\nfrom timeit import default_timer as timer\nimport collections\nfrom openerp import models, fields, api\nfrom openerp.addons.price_list.models.management.lib import mgt_funcs\nfrom . import exc_mkt\n\nfrom . import mkt_funcs\n\n\n# ----------------------------------------------------------- Second Level ---------------------------------------------\n\n# ----------------------------------------------------------- Update Stats ------------------------\n# Set Stats\n@api.multi\ndef update_stats(self):\n\t\"\"\"\n\tUpdate Macro Stats\n\t\"\"\"\n\tprint()\n\tprint('X - Update Stats')\n\n\n\t# Init\n\n\t# Collections\n\tcountry_arr = []\n\n\n\n\t# Macros - Counters - Init\n\tedu_fir, edu_sec, edu_tec, edu_uni, edu_mas, edu_u = 0, 0, 0, 0, 0, 0\n\n\n\n\t# Loop - For all Patients\n\tfor line in self.patient_line:\n\n\n\t\t# Education \n\t\tif line.education == 'first': \n\t\t\tedu_fir = edu_fir + 1\n\n\t\telif line.education == 'second': \n\t\t\tedu_sec = edu_sec + 1\n\n\t\telif line.education == 'technical': \n\t\t\tedu_tec = edu_tec + 1\n\n\t\telif line.education == 'university': \n\t\t\tedu_uni = edu_uni + 1\n\n\t\telif line.education == 'masterphd': \n\t\t\tedu_mas = edu_mas + 1\n\n\t\telse: \n\t\t\tedu_u = edu_u + 1\n\n\n\t\t# Line Analysis\n\t\tmkt_funcs.pl_patient_line_analysis(self, line)\n\n\n\t\t# Countries\n\t\tcountry_arr.append(line.country)\n\n\n\n\n# Macros - Counters\n\tprint(edu_fir, edu_sec, edu_tec, edu_uni, edu_mas, edu_u)\n\n\tself.edu_fir, self.edu_sec, self.edu_tec, self.edu_uni, self.edu_mas, self.edu_u = edu_fir, edu_sec, edu_tec, edu_uni, edu_mas, edu_u\n\n\t#education = self.education.create({\n\tself.education = self.education.create({\n\t\t\t\t\t\t\t\t\t\t'name': self.name,\n\n\t\t\t\t\t\t\t\t\t\t'first': edu_fir,\n\t\t\t\t\t\t\t\t\t\t'second': edu_sec,\n\t\t\t\t\t\t\t\t\t\t'technical': edu_tec,\n\n\t\t\t\t\t\t\t\t\t\t'university': edu_uni,\n\t\t\t\t\t\t\t\t\t\t'master_phd': edu_mas,\n\t\t\t\t\t\t\t\t\t\t'undefined': edu_u,\n\n\t\t\t\t\t\t\t\t\t\t#'marketing_id': self.id,\n\t\t\t\t\t\t\t\t\t})\n\tprint(education)\n\n\n\n\n# Update Macros - Percentages\n\n\t# Sex\n\tself.update_sex()\n\n\t# Age\n\tself.update_age()\n\n\t# Education\n\tself.update_education()\n\n\n\t# First Contact\n\tself.update_first_contact()\n\n\n\t# Vip\n\t#self.vip_true_per = mkt_funcs.get_per(self.vip_true, self.total_count)\n\t#self.vip_false_per = mkt_funcs.get_per(self.vip_false, self.total_count)\n\n\n\n\n\n\n\n# Update Macros - Countries\n\n\t# Using collections\n\tcounter_country = collections.Counter(country_arr)\n\n\t# Country\n\t#print 'Create Country Line '\n\tfor key in counter_country:\n\t\tcount = counter_country[key]\n\t\tcountry = self.country_line.create({\n\t\t\t\t\t\t\t\t\t\t\t\t'name': key,\n\t\t\t\t\t\t\t\t\t\t\t\t'count': count,\n\t\t\t\t\t\t\t\t\t\t\t\t'marketing_id': self.id,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t#print country\n\n\t#print self.country_line\n\t#print\n\n\n# update_stats\n\n\n\n\n\n# ----------------------------------------------------------- Update Vip Sales --------------------\n@api.multi\ndef update_vip_sales(self):  \n\t\"\"\"\n\tUpdate Vip Sales\n\t\"\"\"\n\tprint()\n\tprint('X - Vip Sales')\n\n\t# Patient Lines \n\tfor pl in self.patient_line: \n\n\t\tif pl.vip: \n\t\t\t\n\t\t\t# Clean \n\t\t\tpl.order_line.unlink()\n\t\t\tpl.order_line_vip.unlink()\n\n\t\t\t# Orders \n\t\t\torders = self.env['sale.order'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state', '=', 'sale'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient', '=', pl.patient.name),\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\torder='date_order asc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t#limit=1,\n\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t# Find Vip Date - First Method \n\t\t\tfor order in orders: \n\t\t\t\tfor ol in order.order_line: \n\t\t\t\t\tif ol.product_id.default_code == '495': \t\t# Vip Card \n\t\t\t\t\t\tpl.vip_date = order.date_order\n\n\n\t\t\t# Find Vip Date - Second Method - Legacy \n\t\t\tif pl.vip_date == False:\n\t\t\t\tcard = self.env['openhealth.card'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient_name', '=', pl.patient.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='x_serial_nr asc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tpl.vip_date = card.create_date\n\n\n\t\t\t# Order Lines - Create Order Line \n\t\t\tfor order in orders: \n\n\t\t\t\t# Create Vip \n\t\t\t\tfor ol in order.order_line:\n\t\t\t\t\tpl_ol = pl.order_line.create({\n\t\t\t\t\t\t\t\t\t\t\t\t\t'name': ol.name, \n\t\t\t\t\t\t\t\t\t\t\t\t\t'product_id': ol.product_id.id, \n\t\t\t\t\t\t\t\t\t\t\t\t\t'x_date_created': order.date_order, \n\t\t\t\t\t\t\t\t\t\t\t\t\t'product_uom_qty': ol.product_uom_qty, \n\t\t\t\t\t\t\t\t\t\t\t\t\t'price_unit': ol.price_unit, \n\t\t\t\t\t\t\t\t\t\t\t\t\t'patient_line_id': pl.id, \n\t\t\t\t\t\t})\n\t\t\t\t\t#print pl_ol\n\n\n\n\t\t\t\t\t# Create - Vip sale \n\t\t\t\t\tif pl.vip_date != False: \n\t\t\t\t\t\tif order.date_order >= pl.vip_date and ol.product_id.type in ['service']: \n\n\t\t\t\t\t\t\tpl_ol_vip = pl.order_line_vip.create({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'name': ol.name, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'product_id': ol.product_id.id, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'x_date_created': order.date_order, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'product_uom_qty': ol.product_uom_qty, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'price_unit': ol.price_unit, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'patient_line_id_vip': pl.id, \n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t#print pl_ol\n\n\t\t\tpl.update_fields_vip()\n\n# update_vip_sales\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Create Sale Lines - Button Hidden ------------------------\n# Create Sales\n@api.multi\ndef create_sale_lines(self):\n\t\"\"\"\n\tCreate Sale Lines\n\t\"\"\"\n\tprint()\n\tprint('X - Create Sale Lines')\n\n\t# Handle Exceptions\n\texc_mkt.handle_exceptions(self)\n\n\n\t# Go\n\t# Print Disable\n\t#test_funcs.disablePrint()\n\n\t# Benchmark\n\tt0 = timer()\n\n\t# Clean\n\tself.sale_line.unlink()\n\n\n\t# Get - Only Sales - Not CN\n\torders, count = mgt_funcs.get_orders_filter_fast_fast(self, self.date_begin, self.date_end)\n\t#print(orders)\n\t#print(count)\n\n\tfor order in orders:\n\t\t#if order.state in ['credit_note']:\n\t\t#\tprint('Gotcha !')\n\t\t#\tprint(order.state)\n\t\t#\tprint()\n\n\n\t\t# The patient has been created this month\n\t\tis_new = mkt_funcs.is_new_patient(self, order.patient, self.date_begin, self.date_end)\n\t\t#print(is_new)\n\n\n\t\t#if is_new:\n\t\tif is_new or order.patient.x_test:\n\t\t\t#print('Gotcha')\n\t\t\t#print(order.patient.name)\n\n\t\t\t# Loop\n\t\t\tfor line in order.order_line:\n\t\t\t\tprice_net = line.price_unit * line.product_uom_qty\n\n\t\t\t\t# Family Analysis\n\t\t\t\tif line.pl_price_list in ['2019']:\n\t\t\t\t\tfamily, subfamily, subsubfamily = mkt_funcs.pl_family_analysis(self, line)\n\n\t\t\t\telif line.pl_price_list in ['2018']:\n\t\t\t\t\tfamily, subfamily, subsubfamily = mkt_funcs.pl_family_analysis_2018(self, line)\n\n\n\t\t\t\t# Using Getters - OO\n\t\t\t\tsubsubfamily = line.product_id.get_subsubfamily()\n\n\n\t\t\t\tsale_line = self.sale_line.create({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'date': order.date_order,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'order': order.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'patient': order.patient.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'doctor': order.x_doctor.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'product_id': line.product_id.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'product_uom_qty': line.product_uom_qty,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'price_unit': line.price_unit,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'price_net': price_net,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'family': family,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'subfamily': subfamily,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'subsubfamily': subsubfamily,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'price_list': line.product_id.pl_price_list,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'state': order.state,\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'marketing_id': self.id,\n\t\t\t\t\t})\n\t\t\t\t#print(sale_line)\n\n\tt1 = timer()\n\tself.delta_create_sale_lines = t1 - t0\n\n\t# Print Enable\n\t#test_funcs.enablePrint()\n\n# create_sale_lines\n\n\n\n\n# ----------------------------------------------------------- Analyse Patient Lines ------------------------\n# Analyse patients\n@api.multi\ndef analyse_patient_lines(self):\n\t\"\"\"\n\tAnalyse patient Lines\n\t\"\"\"\n\tprint()\n\tprint('X - Analysis patient Lines')\n\n\t# Benchmark\n\tt0 = timer()\n\n\n\t# Clean\n\tself.vip_true = 0\n\tself.vip_false = 0\n\n\n\t# Loop\n\tfor patient_line in self.patient_line:\n\n\t\t# Clean\n\t\tpatient_line.clean() \t\t# OO\n\n\n\t\t# Lines\n\t\tpatient = patient_line.patient\n\t\t#print(patient.name)\n\t\tmodel = 'price_list.marketing.order_line'\n\t\tlines = self.env[model].search([\n\t\t\t\t\t\t\t\t\t\t\t\t('state', 'in', ['sale', 'draft']),\n\t\t\t\t\t\t\t\t\t\t\t\t('patient', 'in', [patient.name]),\n\t\t\t\t\t\t\t\t\t\t\t\t('marketing_id', '=', self.id),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t#order='x_serial_nr asc',\n\t\t\t\t\t\t\t\t\t\t\t#limit=1,\n\t\t\t\t\t\t\t\t\t\t)\n\n\t\t# Loop\n\t\tfor line in lines:\n\t\t\t#print(line)\n\t\t\tpatient_line.analysis(line)  \t# OO\n\n\n\n\t# Update Macros\n\tself.vip_false = self.total_count - (self.vip_true + self.vip_already_true)\n\n\tif self.total_count not in [0]:\n\t\t#self.vip_already_true_per = float(self.vip_already_true) / float(self.total_count)\n\t\tself.vip_true_per = float(self.vip_true) / float(self.total_count)\n\t\tself.vip_false_per = float(self.vip_false) / float(self.total_count)\n\n\n\n\tt1 = timer()\n\tself.delta_analyse_patient_lines = t1 - t0\n\n# analyse_patient_lines\n\n\n\n\n\n# ----------------------------------------------------------- Analyse Sale Lines ------------------------\n# Update Sales\n@api.multi\ndef analyse_sale_lines(self):\n\t\"\"\"\n\tAnalyse Sale Lines\n\t\"\"\"\n\tprint()\n\tprint('X - Analysis Sale Lines')\n\n\t# Benchmark\n\tt0 = timer()\n\n\n\tmodel = 'price_list.marketing.order_line'\n\n\n\t# Count\n\tstate = 'draft'\n\tcount = self.env[model].search_count([\n\t\t\t\t\t\t\t\t\t\t\t('marketing_id', 'in', [self.id]),\n\t\t\t\t\t\t\t\t\t\t\t('state', 'in', [state]),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t#order='x_serial_nr asc',\n\t\t\t\t\t\t\t\t\t\t\t#limit=1,\n\t\t\t\t\t\t\t\t\t\t)\n\t#print(count)\n\tself.sale_line_budget_count = count\n\n\n\n\n\t# Count\n\tstate = 'sale'\n\tcount = self.env[model].search_count([\n\t\t\t\t\t\t\t\t\t\t\t('marketing_id', 'in', [self.id]),\n\t\t\t\t\t\t\t\t\t\t\t('state', 'in', [state]),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t#order='x_serial_nr asc',\n\t\t\t\t\t\t\t\t\t\t\t#limit=1,\n\t\t\t\t\t\t\t\t\t\t)\n\t#print(count)\n\tself.sale_line_sale_count = count\n\n\n\n\t# By Family\n\tfamily_list = ['consultation', 'procedure', 'product']\n\tstate = 'sale'\n\n\tfor family in family_list:\n\n\t\tcount = self.env[model].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t('marketing_id', 'in', [self.id]),\n\t\t\t\t\t\t\t\t\t\t\t\t('family', 'in', [family]),\n\t\t\t\t\t\t\t\t\t\t\t\t('state', 'in', [state]),\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t#order='x_serial_nr asc',\n\t\t\t\t\t\t\t\t\t\t\t\t#limit=1,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t#print(count)\n\n\t\tif family in ['consultation']:\n\t\t\tself.sale_line_consultation_count = count\n\t\telif family in ['procedure']:\n\t\t\tself.sale_line_procedure_count = count\n\t\telif family in ['product']:\n\t\t\tself.sale_line_product_count = count\n\n\n\tt1 = timer()\n\tself.delta_analyse_sale_lines = t1 - t0\n\n# analyse_sale_lines\n\n\n",
			"file": "models/marketing/stax.py",
			"file_size": 9949,
			"file_write_time": 132205823750000000,
			"settings":
			{
				"buffer_size": 9992,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/education.py",
			"settings":
			{
				"buffer_size": 702,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/mkt_funcs.py",
			"settings":
			{
				"buffer_size": 5835,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/marketing/marketing.xml",
			"settings":
			{
				"buffer_size": 18183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/__init__.py",
			"settings":
			{
				"buffer_size": 188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/first_contact.py",
			"settings":
			{
				"buffer_size": 530,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/patient_line.py",
			"settings":
			{
				"buffer_size": 9801,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/patient/patient.py",
			"settings":
			{
				"buffer_size": 4960,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/patient_line.DEP.py",
			"settings":
			{
				"buffer_size": 4400,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/pat_line_funcs.py",
			"settings":
			{
				"buffer_size": 1611,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/exc_mkt.py",
			"settings":
			{
				"buffer_size": 739,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/marketing/mkt_funcs.DEP.py",
			"settings":
			{
				"buffer_size": 2838,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"browser",
				"Browse Mode: Right Sidebar"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"python",
				"Build With: Python - Syntax Check"
			],
			[
				"package control:install",
				"Package Control: Install Package"
			]
		],
		"width": 459.0
	},
	"console":
	{
		"height": 256.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gibil/cellar/github/price_list/models/product/product_product.py",
		"/Users/gibil/cellar/github/price_list/models/management/management.py",
		"/Users/gibil/cellar/github/price_list/models/patient/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/marketing.tx",
		"/Users/gibil/cellar/github/price_list/models/patient/patient.doc",
		"/Users/gibil/cellar/github/price_list/models/marketing/pat_line_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/marketing.TRASH.py",
		"/Users/gibil/cellar/github/price_list/views/marketing/marketing_other_actions.xml",
		"/Users/gibil/cellar/github/price_list/models/management/management.TRASH.py",
		"/Users/gibil/cellar/github/price_list/models/order/report_sale_product.py",
		"/Users/gibil/cellar/github/price_list/views/marketing/marketing.TRASH.xml",
		"/Users/gibil/cellar/github/price_list/models/marketing/stax.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/pat_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/django/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/django/interface.py",
		"/Users/gibil/cellar/github/price_list/models/order/report_sale_product.DEP.py",
		"/Users/gibil/cellar/github/price_list/views/marketing/marketing_actions.xml",
		"/Users/gibil/cellar/github/price_list/views/menus/menus_marketing.xml",
		"/Users/gibil/cellar/github/price_list/models/management/subfamily.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/account_contasis.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/electronic_container.py",
		"/Users/gibil/cellar/github/price_list/models/management/family_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/stax.py",
		"/Users/gibil/cellar/github/price_list/models/management/management_order_line.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/patient_line.py",
		"/Users/gibil/cellar/github/price_list/models/product/product_template.DEP.py",
		"/Users/gibil/cellar/github/price_list/views/product/product_template_tree.xml",
		"/Users/gibil/cellar/github/price_list/models/product/product_template.py",
		"/Users/gibil/cellar/github/price_list/views/menus/menus_marketing.DEP.xml",
		"/Users/gibil/cellar/github/price_list/views/report_sale_product.xml",
		"/Users/gibil/cellar/github/price_list/models/management/doctor_daily/doctor_daily.py",
		"/Users/gibil/cellar/github/price_list/models/management/productivity/productivity_day.py",
		"/Users/gibil/cellar/github/price_list/models/management/productivity/productivity_day.DEP.py",
		"/Users/gibil/cellar/github/price_list/models/management/management_order_line.DEP.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/pl_mgt_vars.py",
		"/Users/gibil/cellar/github/price_list/models/management/subfamily_line.py",
		"/Users/gibil/cellar/github/price_list/models/product/product_selector.py",
		"/Users/gibil/cellar/github/price_list/models/management/family.py",
		"/Users/gibil/cellar/github/price_list/models/management/__init__.py",
		"/Users/gibil/cellar/github/price_list/views/management/management_actions.xml",
		"/Users/gibil/cellar/github/price_list/models/product/product_selector.pyc",
		"/Users/gibil/cellar/github/price_list/models/management/stats.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/marketing.py",
		"/Users/gibil/cellar/github/price_list/models/configurator/configurator_emr.py",
		"/Users/gibil/cellar/github/price_list/models/configurator/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor/management_doctor_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor/day_doctor_line.py",
		"/Users/gibil/cellar/github/price_list/models/lib_coeffs.py",
		"/Users/gibil/cellar/github/price_list/models/management/family/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/family/family_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/order/management_order_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/order/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/patient/mgt_patient_line.py",
		"/Users/gibil/cellar/github/price_list/views/marketing/marketing.xml",
		"/Users/gibil/cellar/github/price_list/models/management/lib/mgt_line_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/pl_mgt_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/pl_ord_vars.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/prod_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/stats.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/mgt_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/management/lib/exc_mgt.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/patient/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/productivity/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/management_doctor_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/day_doctor_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor_daily/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor_daily.py",
		"/Users/gibil/cellar/github/price_list/models/management/productivity_day.py",
		"/Users/gibil/cellar/github/price_list/models/management/prod_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/management/management_doctor_line.pyc",
		"/Users/gibil/cellar/github/price_list/__init__.py",
		"/Users/gibil/cellar/github/price_list/models/management/mgt_patient_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/day_doctor_line.DEP.py",
		"/Users/gibil/cellar/github/price_list/models/configurator_emr.py",
		"/Users/gibil/cellar/github/price_list/models/management/mgt_line_funcs.py",
		"/Users/gibil/cellar/github/price_list/views/management/management.DEP.xml",
		"/Users/gibil/cellar/github/price_list/models/order/order.py",
		"/Users/gibil/cellar/github/price_list/views/management/management.xml",
		"/Users/gibil/cellar/github/price_list/models/order/order_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/exc_mgt.py",
		"/Users/gibil/cellar/github/price_list/models/management/doctor_line.py",
		"/Users/gibil/cellar/github/price_list/models/management/mgt_funcs.pyc",
		"/Users/gibil/cellar/github/price_list/readme.txt",
		"/Users/gibil/cellar/github/price_list/models/order/closing.py",
		"/Users/gibil/cellar/github/price_list/models/order/pl_clos_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/order/order.TRASH.py",
		"/Users/gibil/cellar/github/price_list/models/order/order_admin.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/procedure.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/control.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/test_treatment.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/pl_lib_exp.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/electronic_order.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/pl_export.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/treatment.py",
		"/Users/gibil/cellar/github/price_list/models/order/__init__.py",
		"/Users/gibil/cellar/github/price_list/views/patient/patient_personal.TRASH.xml",
		"/Users/gibil/cellar/github/price_list/views/patient/patient_personal.xml",
		"/Users/gibil/cellar/github/price_list/readme.md",
		"/Users/gibil/cellar/github/price_list/models/product/product.py",
		"/Users/gibil/cellar/github/price_list/models/marketing/exc_mkt.py",
		"/Users/gibil/cellar/github/price_list/readme.buff",
		"/Users/gibil/cellar/github/price_list/views/electronic/electronic_container.xml",
		"/Users/gibil/cellar/github/price_list/models/order/exc_ord.py",
		"/Users/gibil/cellar/github/price_list/views/electronic/electronic_order.xml",
		"/Users/gibil/cellar/github/price_list/models/patient/patient.py",
		"/Users/gibil/cellar/github/price_list/models/patient/exc_pat.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/pl_creates.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/treatment.TRASH.py",
		"/Users/gibil/cellar/github/price_list/models/product/px_vars.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/session.py",
		"/Users/gibil/cellar/github/price_list/views/menus/menus_management.xml",
		"/Users/gibil/cellar/github/price_list/models/treatment/treatment.DEP.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/pl_creates.TRASH.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/time_funcs.py",
		"/Users/gibil/cellar/github/price_list/models/treatment/pl_user.py",
		"/Users/gibil/cellar/github/price_list/models/services/service_product.py",
		"/Users/gibil/cellar/github/price_list/views/service/service_co2.xml",
		"/Users/gibil/cellar/github/price_list/views/service/service_product.xml",
		"/Users/gibil/cellar/github/price_list/views/service/service.xml",
		"/Users/gibil/cellar/github/price_list/models/services/service.py",
		"/Users/gibil/cellar/github/price_list/views/treatment/procedure.xml",
		"/Users/gibil/cellar/github/price_list/views/treatment/procedure_actions.xml",
		"/Users/gibil/cellar/github/price_list/models/electronic/pl_acc_lib.py",
		"/Users/gibil/cellar/github/price_list/models/electronic/account_line.py",
		"/Users/gibil/cellar/github/price_list/views/product/product_template.TRASH.xml"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"education",
			"education =",
			"many",
			"is_",
			"self.",
			"city",
			"vars",
			"eval_vars",
			"add",
			"inc",
			"get_per(self, ",
			"get_per",
			"pl_patient_line_analysis",
			"mkt_funcs",
			"mk_funcs",
			"pl_patient_line_analysis",
			"mkt_funcs",
			"is_new_patient",
			"is_new",
			"pat_funcs",
			"mkt_funcs",
			"get_patients_filter",
			"mkt_funcs",
			"stax",
			"mkt_funcs",
			"line_ana",
			"macro_line_ana",
			"update_vip",
			"update_stats",
			"create_sale_lines",
			"marketing",
			"openhealth.",
			"histo_line",
			"media_line_form_action",
			"media_line",
			"city_line_form_action",
			"patient_line_vip_not_used_form_action",
			"patient_line_vip",
			"patient_line_mkt_view_tree",
			"patient_line_proc_form_action",
			"create_sale_lines",
			"update_stats",
			"analyse_patient_lines",
			"analyse_patient_",
			"analy",
			"create_sale_lines",
			"update_",
			"update(",
			"delta",
			"django",
			"configur",
			"report",
			"product",
			"validate",
			"key",
			"validat",
			"update_sales_by",
			"update_doctor",
			"update_sales",
			"update_doc",
			"collections",
			"update_stats",
			"pl_update_stats",
			"update_doc",
			"pl_update_sales_by_doctor",
			"pl_update_stats",
			"update_doc",
			"validate_doctor",
			"validat",
			"coeff",
			"family.update",
			"family",
			"collections",
			"family.",
			"family_line",
			"mark",
			".",
			"exc_mgt",
			"collection",
			"mgt_funcs",
			"reset_micro",
			"reset",
			"pl_update_sales_by_doc",
			"day_line",
			"update_daily",
			"update_prod",
			"doctor_day",
			"update_daily",
			"pl_update_stats",
			"pl_stats",
			"update_dail",
			"today",
			"holiday",
			"state",
			"update_pro",
			"produc",
			"update_pr",
			"update_pro",
			"create_days",
			"update_pro",
			"update_daily",
			"doctor_line = fie",
			"update_daily",
			"ord_vars",
			"update_daily",
			"validate",
			"reset",
			"update_pro",
			"create days",
			"Create Day",
			"pl_stats",
			"update_stats",
			"Create Doctor",
			"update_doctors",
			"Pl - Doctor - Stats",
			"doctor_stat",
			"Price List",
			"update_",
			"update_stats",
			"update_day",
			"managem",
			"name",
			"state",
			"get",
			"ticket",
			"print",
			"get_credit_note",
			"get"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"district",
			"get_per(",
			"",
			"name",
			"lib",
			"serial_number",
			"type",
			"patient",
			"total",
			"date",
			"name",
			"create_order_con",
			"family",
			"session",
			"controls",
			"sessions",
			"procedure",
			"create",
			"product",
			"",
			"subfamily",
			"exc_tre",
			"exc_mkt",
			"exc_mgt",
			"exc_pat",
			"exc_ord",
			"exc_tre",
			"account",
			"views/treatment/",
			"views/order/",
			"views/appointment/",
			"views/patient/",
			"views/treatment/",
			"views/order/",
			"views/marketing/",
			"views/electronic/",
			"views/management/",
			"views/service/",
			"views/product/",
			"wizard",
			"user",
			"task",
			"wizard",
			"project",
			"appointment",
			"validate",
			"matrix",
			"day",
			"mgt_exc",
			"marketing",
			"disablePrint()",
			"test_funcs.enablePrint()",
			"test_funcs.blockPrint()",
			"",
			"action=\"openhealth.card_",
			"action=\"openhealth.product_",
			"main_products_2018_menu",
			"",
			")",
			"(",
			"digits=",
			"12, 3",
			"self.",
			"zone",
			"pathology",
			"zone",
			"pathology",
			"zone",
			"pathology",
			"zone",
			"pathology",
			"",
			"zone",
			"pathology",
			"zone",
			"pathology",
			"draft",
			"sale",
			"product",
			"procedure",
			"self",
			"order",
			"marketing",
			"price_list",
			"patient",
			"views/menus/",
			"patient",
			"sale",
			"marketing",
			"price_list",
			"description",
			"company_phone",
			"company_ruc",
			"company_address",
			"company_name",
			"email",
			"patient",
			"bcp",
			"scotiabank",
			"interbank",
			"bbva",
			"total",
			"openhealth.report.sale.product",
			"report_sale_product",
			"external",
			"per_amo",
			"nr",
			"Cons",
			"",
			"gyn",
			"cha",
			"gyn",
			"cha",
			"gyn",
			"",
			"sex_nr_",
			"sex_nr",
			"Medios",
			"first_contact_nr",
			"2018",
			"",
			"old_patient",
			"callcenter",
			"instagram",
			"facebook",
			"12,3",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "__openerp__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4961,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "readme.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62,
						"regions":
						{
						},
						"selection":
						[
							[
								61,
								61
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "models/marketing/marketing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18332,
						"regions":
						{
						},
						"selection":
						[
							[
								1123,
								1123
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 340.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "models/marketing/stax.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9992,
						"regions":
						{
						},
						"selection":
						[
							[
								1761,
								1761
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1186.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "models/marketing/education.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 702,
						"regions":
						{
						},
						"selection":
						[
							[
								38,
								38
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "models/marketing/mkt_funcs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5835,
						"regions":
						{
						},
						"selection":
						[
							[
								560,
								560
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1917.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "views/marketing/marketing.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18183,
						"regions":
						{
						},
						"selection":
						[
							[
								6266,
								6266
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4954.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "models/marketing/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 188,
						"regions":
						{
						},
						"selection":
						[
							[
								188,
								188
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "models/marketing/first_contact.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 530,
						"regions":
						{
						},
						"selection":
						[
							[
								455,
								455
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "models/marketing/patient_line.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9801,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "models/patient/patient.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4960,
						"regions":
						{
						},
						"selection":
						[
							[
								1415,
								1415
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1806.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "models/marketing/patient_line.DEP.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4400,
						"regions":
						{
						},
						"selection":
						[
							[
								288,
								288
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "models/marketing/pat_line_funcs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1611,
						"regions":
						{
						},
						"selection":
						[
							[
								1394,
								1397
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "models/marketing/exc_mkt.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 739,
						"regions":
						{
						},
						"selection":
						[
							[
								23,
								23
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "models/marketing/mkt_funcs.DEP.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2838,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 27.0
	},
	"output.exec":
	{
		"height": 30.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "PriceList.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"p",
				"~/cellar/github/price_list/models/product_template.py"
			],
			[
				"c",
				"~/cellar/github/price_list/models/container.py"
			],
			[
				"o",
				"~/cellar/github/price_list/models/order.py"
			],
			[
				"s",
				"~/cellar/github/price_list/models/service_quick.py"
			],
			[
				"t",
				"~/cellar/github/price_list/models/treatment.py"
			],
			[
				"",
				"~/cellar/github/price_list/models/service_ndyag.py"
			],
			[
				"se",
				"~/cellar/github/price_list/views/service_gyn.xml"
			],
			[
				"g",
				"~/cellar/github/openhealth/models/emr/gen_vars.py"
			],
			[
				"m",
				"~/cellar/github/openhealth/models/management/day_doctor_line.py"
			],
			[
				"e",
				"~/cellar/github/openhealth/models/emr/evaluation.py"
			],
			[
				"a",
				"~/cellar/github/openhealth/views/appointments/appointment_search.xml"
			],
			[
				"l",
				"~/cellar/github/openhealth/models/lib_qr.py"
			],
			[
				"d",
				"~/cellar/github/openhealth/data/prods/odoo_data_services_consult.xml"
			],
			[
				"r",
				"~/cellar/github/openhealth/readme.txt"
			],
			[
				"i",
				"~/cellar/github/openhealth/models/importx.py"
			],
			[
				"pa",
				"~/cellar/github/openhealth/models/patient.py"
			],
			[
				"ap",
				"~/cellar/github/openhealth/models/appfuncs.py"
			],
			[
				"h",
				"~/cellar/github/openhealth/views/histogram/histogram.xml"
			],
			[
				"ka",
				"~/cellar/github/openhealth/views/kardex/kardex.xml"
			],
			[
				"tick",
				"~/cellar/github/openhealth/views/sale_documents/ticket_receipts.xml"
			],
			[
				"sa",
				"~/cellar/github/openhealth/models/sale_proof.py"
			],
			[
				"pro",
				"~/cellar/github/openhealth/views/products/product.xml"
			],
			[
				"z",
				"~/cellar/github/openhealth/models/zone.py"
			],
			[
				"b",
				"~/cellar/github/openhealth/views/base.xml"
			],
			[
				"sec",
				"~/cellar/github/openhealth/security/openhealth_security.xml"
			],
			[
				"_",
				"~/cellar/github/openhealth/__openerp__.py"
			],
			[
				"invoi",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/invoice.py"
			],
			[
				"pr",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/sale_proof.py"
			],
			[
				"re",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/views/sale_documents/receipts.xml"
			],
			[
				"service_ndy",
				"views/services/service_ndyag.xml"
			],
			[
				"service_ip",
				"views/services/service_ipl.xml"
			],
			[
				"service",
				"views/services/service_excilite.xml"
			],
			[
				"order",
				"views/orders/order.xml"
			],
			[
				"control",
				"views/controls/control.xml"
			],
			[
				"consult",
				"views/consultations/consultation.xml"
			],
			[
				"procedure",
				"views/procedures/procedure.xml"
			],
			[
				"ser",
				"views/services/service_co2.xml"
			],
			[
				"trea",
				"views/treatments/treatment.xml"
			],
			[
				"patient",
				"views/patients/patient.xml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/cellar/github/openhealth/OpenHealth-MIN.sublime-project"
			],
			[
				"\t",
				"~/Documents/Aptana Studio 3 Workspace/ccdata/ccData.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
